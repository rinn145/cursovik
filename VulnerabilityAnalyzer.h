#include <iostream>
#include <vector>
#include <string>
#include <fstream>


#ifndef CPPCURSOVIK_VULNERABILITYANALYZER_H
#define CPPCURSOVIK_VULNERABILITYANALYZER_H


class VulnerabilityAnalyzer {
private:
    std::string keyword;
    int threatCountCritical;
    int threatCountHigh;
    int threatCountMedium;
    int threatCountLow;

public:
    VulnerabilityAnalyzer() : threatCountCritical(0), threatCountHigh(0), threatCountMedium(0), threatCountLow(0) {}

    void setKeyword(const std::string& key) {
        keyword = key;
    }

    void analyze() {
        try {
            std::ifstream file("vullist.xlsx");
            if (!file.is_open()) {
                throw std::runtime_error("Не удалось открыть файл vullist.xlsx");
            }

            std::string line;
            while (std::getline(file, line)) {
                if (line.find(keyword) != std::string::npos) {
                    if (line.find("Низкий") != std::string::npos) {
                        threatCountLow++;
                    } else if (line.find("Средний") != std::string::npos) {
                        threatCountMedium++;
                    } else if (line.find("Высокий") != std::string::npos) {
                        threatCountHigh++;
                    } else if (line.find("Критический") != std::string::npos) {
                        threatCountCritical++;
                    }
                }
            }

            file.close();

            std::cout << "Анализ завершен." << std::endl;
        } catch (const std::exception& e) {
            std::cerr << "Ошибка при выполнении анализа: " << e.what() << std::endl;
        }
    }

    void exportToWord() {
        try {
            std::ofstream wordFile("results.docx");
            if (!wordFile.is_open()) {
                throw std::runtime_error("Не удалось создать файл results.docx");
            }

            wordFile << "Результаты анализа уязвимостей:" << std::endl;
            wordFile << "Критический: " << threatCountCritical << std::endl;
            wordFile << "Высокий: " << threatCountHigh << std::endl;
            wordFile << "Средний: " << threatCountMedium << std::endl;
            wordFile << "Низкий: " << threatCountLow << std::endl;

            wordFile.close();

            std::cout << "Результаты анализа успешно экспортированы в файл results.docx" << std::endl;
        } catch (const std::exception& e) {
            std::cerr << "Ошибка при экспорте результатов анализа: " << e.what() << std::endl;
        }
    }
};

#endif //CPPCURSOVIK_VULNERABILITYANALYZER_H



